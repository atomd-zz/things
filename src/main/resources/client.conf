things {
  # "local" or "cluster"
  mode = "local"

  scheduler {
    tick-duration = 10 ms
    ticks-per-wheel = 512
  }

  akka.remote.use-dispatcher = "akka.remote.default-remote-dispatcher"
  aggregator-failure-detector {

    # FQCN of the failure detector implementation.
    # It must implement akka.remote.FailureDetector and have
    # a public constructor with a com.typesafe.config.Config and
    # akka.actor.EventStream parameter.
    implementation-class = "akka.remote.DeadlineFailureDetector"

    # How often keep-alive heartbeat/reporting messages should be sent to aggregator.
    heartbeat-interval = 5 s

    # Defines the failure detector threshold.
    # A low threshold is prone to generate many wrong suspicions but ensures
    # a quick detection in the event of a real crash. Conversely, a high
    # threshold generates fewer mistakes but needs more time to detect
    # actual crashes.
    threshold = 10.0

    # Number of the samples of inter-heartbeat arrival times to adaptively
    # calculate the failure timeout for connections.
    max-sample-size = 200

    # Minimum standard deviation to use for the normal distribution in
    # AccrualFailureDetector. Too low standard deviation might result in
    # too much sensitivity for sudden, but normal, deviations in heartbeat
    # inter arrival times.
    min-std-deviation = 100 ms

    # Number of potentially lost/delayed heartbeats that will be
    # accepted before considering it to be an anomaly.
    # This margin is important to be able to survive sudden, occasional,
    # pauses in heartbeat arrivals, due to for example garbage collect or
    # network drop.
    acceptable-heartbeat-pause = 12 s


    # How often to check for nodes marked as unreachable by the failure
    # detector
    unreachable-nodes-reaper-interval = 5 s

    # After the heartbeat request has been sent the first failure detection
    # will start after this period, even though no heartbeat mesage has
    # been received.
    expected-response-after = 3 s
  }

  server {

    enable-notification = true

    enable-persistence = true
    # seconds of server heartbeat send interval
    # socketio.js will disclose connection strictly according to both heartbeatTimeout and closeTimeout,
    # we have to give heartbeatInterval some loose for example 30s for network delivering time.
    heartbeat-interval = 30

    # seconds. Send to client as protocol part, client will use it to decide if server is unavailable.
    heartbeat-timeout = 60

    # seconds.
    # Used by server to decide if client is also available, start countdown when a heartbeat sent
    # Send to client as protocol part, client will use it to decide if server is unavailable.
    close-timeout = 60

    # seconds.
    # Used by server to decide if connectionSession should stop/exit.
    idle-timeout = 7200

    # seconds
    actor-selection-resolve-timeout = 10

    # seconds
    topic-subscribe-timeout = 30

    enable-connectionsession-persistence = false
  }

  seed-nodes = []

  routing-logic = "consistent-hashing"
}

akka {
  loglevel = INFO
  actor.provider = "akka.remote.RemoteActorRefProvider"
  remote.log-remote-lifecycle-events = off
  akka.log-dead-letters = off
  akka.log-dead-letters-during-shutdown = off
}
